VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "UnidadesmedidasServices"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Compare Database

'Feito em: 11/10/2022 10:38:15
'Feito por: Welbert Sabino
'sabinowelbert@gmail.com
'(31) 99752-4220
'-------------------------------------------------------------
Private cn As Connect
'-----------------------------------------------------------------------------
'Adiciona um modelo Unidadesmedidas
'-----------------------------------------------------------------------------
Public Sub SetConn(conn As Connect)
   Set cn = conn
End Sub
Public Sub Add(Model As Unidadesmedidas)
On Error GoTo catch
Dim validate As String: validate = ValidateModel
Dim dl As New DataLayer
'-----------------------------------------------------------------------------
'Validate é opcional usar
'-----------------------------------------------------------------------------
If Len(validate) = 0 Then
dl.Add Model.parameter, cn
Else
'-----------------------------------------------------------------------------
'Se não conseguir adicionar enviar um erro
'-----------------------------------------------------------------------------
Err.Raise 2001, "Add-Unidadesmedidas", validate
End If
Set dl = Nothing
Exit Sub
catch:
    Err.Raise Err.Number, "Add-Unidadesmedidas", Err.Description
End Sub

'-----------------------------------------------------------------------------
'Adicionar Multiplos Objetos do tipo Unidadesmedidas, devem ser passados dentro de uma collection
'-----------------------------------------------------------------------------
Public Sub AddMultipleRows(CollectionModel As Collection)
On Error GoTo catch
Dim dl As New DataLayer
dl.AddMultipleRows CollectionModel, cn
Set dl = Nothing
Exit Sub
catch:
    Err.Raise Err.Number, "AddMultipleRows-Unidadesmedidas", Err.Description
End Sub
'-----------------------------------------------------------------------------
'Altera um modelo Unidadesmedidas
'-----------------------------------------------------------------------------
Public Sub Update(Model As Unidadesmedidas)
On Error GoTo catch
Dim validate As String: validate = ValidateModel
Dim dl As New DataLayer
    
If Len(validate) = 0 Then
dl.Update Model.parameter, "Cod='" & Model.Cod, cn
Else
'-----------------------------------------------------------------------------
'Caso haja erro enviar um erro
'-----------------------------------------------------------------------------
Err.Raise 2001, "Update-Unidadesmedidas", validate
End If
Set dl = Nothing
Exit Sub
catch:
    Err.Raise Err.Number, "Update-Unidadesmedidas", Err.Description
End Sub

'-----------------------------------------------------------------------------
'Exclui um modelo do tipo Unidadesmedidas
'-----------------------------------------------------------------------------
Public Sub Delete(Id As Integer)
On Error GoTo catch
Dim dl As New DataLayer
Dim parameter As New ParameterSql: parameter.NameTable = "Unidadesmedidas"
dl.Delete parameter, "Id=" & Id, cn
Set dl = Nothing
Set parameter = Nothing
Exit Sub
catch:
    Err.Raise Err.Number, "Delete-Unidadesmedidas", Err.Description
End Sub

'-----------------------------------------------------------------------------
'Devolve um array Factory (Um objeto contendo o array dos dados)
'-----------------------------------------------------------------------------
Public Function SelectModelByArray(Optional WhereCondition As String) As ArrayFactory
On Error GoTo catch
Dim dl As New DataLayer
Dim rs As Object
Dim parameter As New ParameterSql: parameter.NameTable = "Unidadesmedidas"
    
Set rs = VBA.CreateObject("ADODB.Recordset")
    
If Len(WhereCondition & "") = 0 Then
Set rs = dl.SelectModel(parameter, cn)
Set SelectModelByArray = rs
Else
Set rs = dl.SelectModel(parameter, cn, WhereCondition)
Set SelectModelByArray = rs
End If
    
Set dl = Nothing
Set parameter = Nothing
Exit Function
catch:
Err.Raise Err.Number, "SelectModelByArray-Unidadesmedidas", Err.Description
End Function
'-----------------------------------------------------------------------------
'Devolve uma coleção com vários objetos do tipo Unidadesmedidas
'-----------------------------------------------------------------------------
Public Function SelectModelByCollection(Optional WhereCondition As String) As Collection
Dim AF As New ArrayFactory
If Len(WhereCondition & "") = 0 Then
Set AF = SelectModelByArray
Else
Set AF = SelectModelByArray(WhereCondition)
End If
Set SelectModelByCollection = ListedModel(AF)
End Function
'-----------------------------------------------------------------------------
'Monta um ou vários objetos tipo Unidadesmedidas e passa para uma collection
'-----------------------------------------------------------------------------
Private Function ListedModel(AF As ArrayFactory) As Collection
On Error GoTo catch
Dim collectionTemp As New Collection
Dim thisUnidadesmedidas As Unidadesmedidas
Dim i As Long
i = AF.Rows
For i = 1 To AF.Rows
    Set thisUnidadesmedidas = New Unidadesmedidas
    
    thisUnidadesmedidas.Cod = m_Util.NullForData(AF.GetItem(i, "Cod"))
    thisUnidadesmedidas.Nome = m_Util.NullForData(AF.GetItem(i, "Nome"))
    collectionTemp.Add thisUnidadesmedidas
Next
Set ListedModel = collectionTemp
Exit Function
catch:
    Err.Raise Err.Number, "ListedModel-Unidadesmedidas", Err.Description
End Function
'-----------------------------------------------------------------------------
'Devolve um modelo do tipo Unidadesmedidas
'-----------------------------------------------------------------------------
Public Function Model(Id As Integer) As Unidadesmedidas

On Error GoTo catch
Set Model = SelectModelByCollection("Where Id=" & Id).Item(1)
Exit Function
catch:
Err.Raise Err.Number, "Model-Unidadesmedidas", Err.Description
End Function

'-----------------------------------------------------------------------------
'Devolve uma cadeia de string para montar uma listabox ou combobox
'-----------------------------------------------------------------------------
Public Function ListToString(Optional FieldsSeparatorByDelimiter As String, Optional WhereCondition As String, Optional bCabecalho As Boolean) As String
Dim i, Limite As Integer
Dim Linha As Long
Dim AF As ArrayFactory
Dim ArrayList As Variant
Dim NomeCampo As String
Dim CadeiaString As String
Dim Cabecalho As String
If bCabecalho = True Then
   Cabecalho = TrataCabecalho(FieldsSeparatorByDelimiter)
End If
ArrayList = m_Util.ConvertToArray(FieldsSeparatorByDelimiter)
Limite = UBound(ArrayList)
Set AF = SelectModelByArray(WhereCondition)
If AF.Rows = 0 Then Exit Function

For Linha = 1 To AF.Rows
    For i = 0 To Limite
        NomeCampo = ArrayList(i)
        CadeiaString = CadeiaString & ";" & AF.GetItem(Linha, RetornaNomeCampo(NomeCampo, 0))
    Next
    i = 0
Next
ListToString = Cabecalho & Mid(CadeiaString, 2, Len(CadeiaString))
End Function

Private Function ValidateModel() As String

End Function

