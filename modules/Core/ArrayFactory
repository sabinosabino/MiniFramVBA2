VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ArrayFactory"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Compare Database
Private PositionX As Long
Private PositionY As Long
Private ArrayTemp As Variant
Public ArrayFields As Variant
Public Sub SetArrayField(ArrayList As Variant)
    ArrayFields = ArrayList
End Sub
Public Sub SetArray(ArrayList As Variant)
    
    If Len(fields & "") > 0 Then
    
        Err.Raise -1, "SetArray", "Método não pode ser usado enquanto objeto for usando para inserção de dados"
    
    End If
    
    ArrayTemp = ArrayList
    
    PositionY = UBound(ArrayTemp, 1) + 1 'Horizontal
    
    PositionX = UBound(ArrayTemp, 2) + 1 'Vertical
    
End Sub
Public Function GetArrayResult() As Variant
    GetArrayResult = ArrayTemp
End Function
Private Function GetIndexbyFieldName(nameField As String) As Integer
    Dim i As Integer
    For i = 0 To UBound(ArrayFields)
        If ArrayFields(i) = nameField Then
            GetIndexbyFieldName = i + 1
            Exit Function
        End If
    Next
End Function
Public Function GetNameColumnbyIndex(pos As Long) As String
On Error GoTo catch
    GetNameColumnbyIndex = ArrayFields(pos - 1)
    Exit Function
catch:
    Err.Raise Err.Number, "GetNameColumnbyIndex", Err.Description
End Function
Public Function GetAllNamesColumns() As String
    Dim i As Integer
    Dim text As String
    For i = 0 To UBound(ArrayFields)
        'i = index loop
        Debug.Print "(" & i + 1 & ")" & Chr(34) & GetNameColumnbyIndex(i + 1) & Chr(34) & ""
    Next
End Function
Public Function GetItemXY(PosX As Long, PosY As Long) As Variant
    
    If Len(fields & "") > 0 Then
    
        Err.Raise -1, "GetItem", "Método não pode ser usado enquanto objeto for usando para inserção de dados"
    
    End If
    
    If PosX > PositionX Or PosY > PositionY Then
        Err.Raise -2, "GetItem", "Erro: Posição informada é maior do que posição disponível no elemento."
    End If
    On Error GoTo catch
    
    GetItemXY = ArrayTemp(PosX - 1, PosY - 1)
    
    Exit Function
catch:
    Err.Raise Err.Number, "GetItem", Err.Description
End Function
Public Function GetItem(PosX As Long, nameField As String) As Variant
    
    If Len(fields & "") > 0 Then
    
        Err.Raise -1, "GetItem", "Método não pode ser usado enquanto objeto for usando para inserção de dados"
    
    End If
    
    If PosX > PositionX Or GetIndexbyFieldName(nameField) > PositionY Then
        Err.Raise -2, "GetItem", "Erro: Posição informada é maior do que posição disponível no elemento."
    End If
    On Error GoTo catch
    If IsNull(ArrayTemp(PosX - 1, GetIndexbyFieldName(nameField) - 1)) Then
        GetItem = ""
    Else
        GetItem = ArrayTemp(PosX - 1, GetIndexbyFieldName(nameField) - 1)
    End If
    Exit Function
catch:
    Err.Raise Err.Number, "GetItem", Err.Description
End Function
Public Function GetColumn(PosY As Integer)
    
    If Len(fields & "") > 0 Then
    
        Err.Raise -1, "GetColumn", "Método não pode ser usado enquanto objeto for usando para inserção de dados"
    
    End If
    
    If PosY > PositionY Then
        Err.Raise -2, "GetColumn", "Erro: Posição informada é maior do que posição disponível no elemento."
    End If
    
    On Error GoTo catch
    
    GetColumn = ArrayTemp(0, PosY - 1)
    
    Exit Function
catch:
    Err.Raise Err.Number, "GetColumn", Err.Description
End Function
Public Function col(nameField As String)
    
    If Len(fields & "") > 0 Then
    
        Err.Raise -1, "GetColumn", "Método não pode ser usado enquanto objeto for usando para inserção de dados"
    
    End If
    
    If PosY > PositionY Then
        Err.Raise -2, "GetColumn", "Erro: Posição informada é maior do que posição disponível no elemento."
    End If
    
    On Error GoTo catch
    
    col = ArrayTemp(0, GetIndexbyFieldName(nameField) - 1)
    
    Exit Function
catch:
    Err.Raise Err.Number, "GetColumn", Err.Description
End Function
Public Property Get Rows() As Long
    Rows = PositionX
End Property

Public Property Get Columns() As Long
    Columns = PositionY
End Property

Private Sub TransposeArray()

If Me.Rows = 0 Then
    Exit Sub
End If

Dim x As Long
Dim y As Long
Dim Xupper As Long
Dim Yupper As Long
Dim tempArray As Variant
    Xupper = UBound(ArrayTemp, 2)
    Yupper = UBound(ArrayTemp, 1)
    ReDim tempArray(Xupper, Yupper)
    For x = 0 To Xupper
        For y = 0 To Yupper
            tempArray(x, y) = ArrayTemp(y, x)
        Next y
    Next x
    ArrayTemp = tempArray
End Sub
Public Property Let Transpose(ByVal value As Boolean)
    
    If value Then
    
        TransposeArray
    
    End If
End Property

